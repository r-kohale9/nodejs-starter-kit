# Entity
type Reviews {
  totalCount: Int
  edges: [ReviewEdges]
  pageInfo: ReviewPageInfo
}
type ReviewEdges {
  node: Review
  cursor: Int
}
type ReviewPageInfo {
  endCursor: Int
  hasNextPage: Boolean
}

type ReviewImage {
  id: Int
  imageUrl: String
}

type Review {
  id: Int
  rating: String
  feedback: String
  reviewImages: [ReviewImage]
  createdAt: String!
  updatedAt: String!
}

extend type Query {
  review(id: Int): Review
  allReviews(
    userId: Int
    limit: Int
    after: Int
    orderBy: OrderByListInput
    filter: FilterListInput
  ): Reviews
  reviews(
    userId: Int
    limit: Int
    after: Int
    orderBy: OrderByListInput
    filter: FilterListInput
  ): Reviews
}

extend type Mutation {
 # Create new Review
  addReview(input: AddReviewInput!): Review
  # # Edit a review
  editReview(input: EditReviewInput!): Boolean
  # # Delete a review
  deleteReview(id: Int!): Boolean
}

input AddReviewInput {
  id: Int
  userId: Int
  listingId: Int
  feedback: String
  rating: Int
  reviewImages: [ReviewImagesInput]
}
# Input for addReview Mutation
input ReviewImagesInput {
  id: Int
  imageUrl: String!
}

# Input for editReview Mutation
input EditReviewInput {
  id: Int!
  userId: Int
  feedback: String
  rating: Int
  reviewImages: [ReviewImagesInput]
}
# extend type Subscription {
#   subscriptionName: TypeName
# }
