# Entity
type Subject {
  id: Int!
  title: String!
  description: String
  chapter: [Chapter]
  isActive: Boolean
  createdAt: String!
  updatedAt: String!
}
type Chapter {
  id: Int!
  title: String!
  description: String
  topic: [Topic]
  isActive: Boolean
  createdAt: String!
  updatedAt: String!
}
type Topic {
  id: Int!
  title: String!
  description: String
  isActive: Boolean
  createdAt: String!
  updatedAt: String!
}

type Question {
  id: Int!
  questionType: String
  description: String
  isActive: Boolean
  choices: [Choice]
  createdAt: String
  updatedAt: String
}

type Choice {
  id: Int!
  questionId: Int!
  description: String!
  createdAt: String
  updatedAt: String
}

type QuestionEdges {
  node: Question
  cursor: Int
}

type QuestionList {
  totalCount: Int
  edges: [QuestionEdges]
  pageInfo: QuestionPageInfo
}

type QuestionPageInfo {
  endCursor: Int
  hasNextPage: Boolean
}

type Subjects {
  totalCount: Int
  edges: [SubjectEdges]
  pageInfo: SubjectPageInfo
}

type SubjectEdges {
  node: Subject
  cursor: Int
}

type SubjectPageInfo {
  endCursor: Int
  hasNextPage: Boolean
}

extend type Query {
  #get question list
  questionList(
    limit: Int
    after: Int
    filter: FilterQuestionInput
    orderBy: OrderByQuestionInput
  ): QuestionList
  #get question by id
  question(id: Int!): Question

  subjects(
    limit: Int!
    after: Int!
    orderBy: OrderBySubjectInput
    filter: FilterSubjectInput
  ): Subjects
  subject(id: Int!): Subject
  chapter(id: Int!): Chapter
  topic(id: Int!): Topic
}

# Input for ordering listings
input OrderBySubjectInput {
  column: String
  # asc | desc
  order: String
}

input FilterSubjectInput {
  userId: Int
  searchText: String

  isActive: Boolean
}
input FilterQuestionInput {
  searchText: String
  isActive: Boolean
}

# Input for ordering users
input OrderByQuestionInput {
  # id | description
  column: String
  # asc | desc
  order: String
}

extend type Mutation {
  # Create new question
  addQuestion(input: AddQuestionInput!): Question
  # Edit a question
  editQuestion(input: EditQuestionInput!): Question
  # Delete question
  deleteQuestion(id: Int): Question
  # Duplicate question
  # duplicateQuestion(userId: Int!, questionId: Int!): Question

  addSubject(input: AddSubjectInput!): Int
  addChapter(input: AddChapterInput!): Int
  addTopic(input: AddTopicInput!): Int

  editSubject(input: EditSubjectInput!): Boolean
  editChapter(input: EditChapterInput!): Boolean
  editTopic(input: EditTopicInput!): Boolean

  deleteSubject(id: Int!): Boolean
  deleteChapter(id: Int!): Boolean
  deleteTopic(id: Int!): Boolean
}

input AddSubjectInput {
  userId: Int

  title: String
  description: String

  isActive: Boolean
}
input AddChapterInput {
  subjectId: Int

  title: String
  description: String

  isActive: Boolean
}
input AddTopicInput {
  chapterId: Int

  title: String
  description: String

  isActive: Boolean
}

input EditSubjectInput {
  id: Int!
  userId: Int

  title: String
  description: String

  isActive: Boolean
}
input EditChapterInput {
  id: Int!
  subjectId: Int!

  title: String
  description: String

  isActive: Boolean
}
input EditTopicInput {
  id: Int!
  topicId: Int!

  title: String
  description: String

  isActive: Boolean
}

input EditQuestionInput {
  id: Int!
  description: String!
  questionType: String!
  isActive: Boolean
  choices: [ChoiceInput!]
}

input EditChoiceInput {
  id: Int
  questionId: Int
  description: String!
}

input AddQuestionInput {
  description: String!
  questionType: String!
  isActive: Boolean
  choices: [ChoiceInput]!
}

input ChoiceInput {
  id: Int
  questionId: Int
  description: String!
}

extend type Subscription {
  # modelUpdated: UpdateModelPayload
  questionsUpdated(filter: FilterQuestionInput): UpdateQuestionsPayload
  questionUpdated(id: Int): UpdateQuestionPayload
}

type UpdateQuestionsPayload {
  mutation: String!
  node: Question
}

type UpdateQuestionPayload {
  mutation: String!
  id: Int
  node: Question
}
