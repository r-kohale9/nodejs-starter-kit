# Entity
type PromoCodes {
  totalCount: Int
  edges: [PromoCodeEdges]
  pageInfo: PromoCodePageInfo
}
type PromoCodeEdges {
  node: PromoCode
  cursor: Int
}
type PromoCodePageInfo {
  endCursor: Int
  hasNextPage: Boolean
}

type PromoCode {
  id: Int
  title: String
  imageUrl: String
  validity: Int
  promoCode: String
}

extend type Query {
  promoCode(id: Int): PromoCode
  getPromoCodes(
    limit: Int
    after: Int
    orderBy: OrderByListInput
    filter: FilterListInput
  ): PromoCodes
}

extend type Mutation {
  # Create new PromoCode
  addPromoCode(input: AddPromoCodeInput!): PromoCode
  # # Edit a PromoCode
  editPromoCode(input: EditPromoCodeInput!): Boolean
  # # Delete a PromoCode
  deletePromoCode(id: Int!): Boolean
}
input AddPromoCodeInput {
  id: Int
  title: String
  imageUrl: String
  validity: Int
  promoCode: String
}

input EditPromoCodeInput {
  id: Int!
  title: String
  imageUrl: String
  validity: Int
  promoCode: String
}

# extend type Subscription {
#   subscriptionName: TypeName
# }
